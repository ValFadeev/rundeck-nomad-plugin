package io.github.valfadeev.rundeck_nomad_plugin.driver.docker;

import com.dtolabs.rundeck.core.plugins.configuration.StringRenderingConstants;
import com.dtolabs.rundeck.plugins.util.DescriptionBuilder;
import com.dtolabs.rundeck.plugins.util.PropertyBuilder;
import io.github.valfadeev.rundeck_nomad_plugin.common.PropertyComposer;

import static io.github.valfadeev.rundeck_nomad_plugin.driver.docker.DockerConfigOptions.*;
        
public class DockerPropertyComposer extends PropertyComposer {

    @Override
    public DescriptionBuilder addProperties(DescriptionBuilder builder) {
            return builder
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_IMAGE)
                            .title("Docker image")
                            .description("The Docker image to run")
                            .required(true)
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_LOAD)
                            .title("Load image from file")
                            .description("Path to image archive file")
                            .required(false)
                            .defaultValue("")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .booleanType(DOCKER_FORCE_PULL)
                            .title("Force pull")
                            .description("Always pull latest image instead of "
                                    + "using existing local image")
                            .required(false)
                            .defaultValue("false")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_SERVER_ADDRESS)
                            .title("Server")
                            .description("The server domain/IP without the protocol. "
                                    + "Docker Hub is used by default.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Registry")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_USERNAME)
                            .title("Username")
                            .description("The account username.")
                            .renderingOption("selectionAccessor",
                                    StringRenderingConstants.SelectionAccessor.STORAGE_PATH)
                            .renderingOption("valueConversion",
                                    StringRenderingConstants.ValueConversion.STORAGE_PATH_AUTOMATIC_READ)
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Registry")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_PASSWORD)
                            .title("Password")
                            .description("The account password.")
                            .renderingOption("selectionAccessor",
                                    StringRenderingConstants.SelectionAccessor.STORAGE_PATH)
                            .renderingOption("valueConversion",
                                    StringRenderingConstants.ValueConversion.STORAGE_PATH_AUTOMATIC_READ)
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Registry")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_EMAIL)
                            .title("Email")
                            .description("The account email.")
                            .renderingOption("selectionAccessor",
                                    StringRenderingConstants.SelectionAccessor.STORAGE_PATH)
                            .renderingOption("valueConversion",
                                    StringRenderingConstants.ValueConversion.STORAGE_PATH_AUTOMATIC_READ)
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Registry")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .booleanType(DOCKER_AUTH_SOFT_FAIL)
                            .title("Ignore registry authentication failures")
                            .description("Don't fail the task on an auth failure. "
                                    + "Attempt to continue without auth.")
                            .required(false)
                            .defaultValue("false")
                            .renderingOption("groupName", "Registry")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_COMMAND)
                            .title("Docker command")
                            .description("The command to run when starting the container")
                            .required(false)
                            .defaultValue("")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_ARGS)
                            .title("Docker command arguments")
                            .description("A comma-separated list of arguments "
                                    + "to the optional command. If no command "
                                    + "is specified, the arguments are passed "
                                    + "directly to the container")
                            .required(false)
                            .defaultValue("")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_LABELS)
                            .title("Labels")
                            .description("A key-value map of labels to set "
                                    + "to the containers on start. "
                                    + "Example: FOO=foo\\nBAR=bar")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("displayType",
                                    StringRenderingConstants.DisplayType.MULTI_LINE)
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_WORKDIR)
                            .title("Container working directory")
                            .description("The working directory inside the container")
                            .required(false)
                            .defaultValue("")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .booleanType(DOCKER_INTERACTIVE_MODE)
                            .title("Interactive mode")
                            .description("Keep STDIN open on the container")
                            .required(true)
                            .defaultValue("false")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .booleanType(DOCKER_TTY)
                            .title("TTY")
                            .description("Allocate a pseudo-TTY for the container")
                            .required(true)
                            .defaultValue("false")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .select(DOCKER_LOG_DRIVER)
                            .title("Logging driver")
                            .description("Logging driver type")
                            .required(true)
                            .values("none",
                                    "json-file",
                                    "syslog",
                                    "journald",
                                    "gelf",
                                    "fluentd",
                                    "awslogs",
                                    "splunk",
                                    "etwlogs",
                                    "gcplogs"
                            )
                            .renderingOption("groupName", "Logging")
                            .renderingOption("grouping", "secondary")
                            .defaultValue("syslog")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_LOG_OPT)
                            .title("Logging driver options")
                            .description("A newline-separated key-value map of Docker logging options")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Logging")
                            .renderingOption("grouping", "secondary")
                            .renderingOption("displayType",
                                    StringRenderingConstants.DisplayType.MULTI_LINE)
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .freeSelect(DOCKER_NETWORK_MODE)
                            .title("Network mode")
                            .description("The network mode to be used for the container")
                            .required(true)
                            .values("default",
                                    "bridge",
                                    "host",
                                    "none"
                            )
                            .defaultValue("bridge")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_NETWORK_ALIASES)
                            .title("Network aliases")
                            .description("A comma-separated list of network-scoped aliases,"
                                    + " provide a way for a container to be discovered by an "
                                    + "alternate name by any other container within the scope "
                                    + "of a particular network.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_PORT_MAP)
                            .title("Host port mapping")
                            .description("A newline-separated key-value map "
                                    + "of port labels to host port numbers")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("displayType",
                                    StringRenderingConstants.DisplayType.MULTI_LINE)
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_HOSTNAME)
                            .title("Container hostname")
                            .description("The hostname to assign to the container")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_IPV4_ADDRESS)
                            .title("IPv4 address")
                            .description("The IPv4 address to be used for the container "
                                    + "when using user defined networks. "
                                    + "Requires Docker 1.13 or greater.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_IPV6_ADDRESS)
                            .title("IPv6 address")
                            .description("The IPv6 address to be used for the container "
                                    + "when using user defined networks. "
                                    + "Requires Docker 1.13 or greater.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_MAC_ADDRESS)
                            .title("MAC address")
                            .description("The MAC address for the container to use "
                                    + "(e.g. \"02:68:b3:29:da:98\").")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_EXTRA_HOSTS)
                            .title("Extra hosts")
                            .description("A comma-separated list of hosts, given as host:IP, "
                                    + "to be added to /etc/hosts.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_DNS_SEARCH_DOMAINS)
                            .title("DNS search domains")
                            .description("A comma-separated list of DNS search domains "
                                    + "for the container to use.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_DNS_SERVERS)
                            .title("DNS search domains")
                            .description("A comma-separated list of DNS servers "
                                    + "for the container to use. "
                                    + "Requires Docker v1.10 or greater.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Networking")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_VOLUMES)
                            .title("Container volume mounts")
                            .description("A comma-separated list of \"host/path:container/path\" "
                                    + "strings to bind host paths to container paths")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Volumes")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_VOLUME_DRIVER)
                            .title("Volume driver")
                            .description("The name of the volume driver used to mount volumes. "
                                    + "Must be used along with volumes.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Volumes")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .longType(DOCKER_SHM_SIZE)
                            .title("Size of /dev/shm, bytes")
                            .description("The size (bytes) of /dev/shm for the container")
                            .required(true)
                            .defaultValue("65536")
                            .renderingOption("groupName", "Resource constraints")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .booleanType(DOCKER_PRIVILEGED_MODE)
                            .title("Privileged mode")
                            .description("Privileged mode gives the container access to devices "
                                    + "on the host. ")
                            .required(false)
                            .defaultValue("false")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .string(DOCKER_SECURITY_OPT)
                            .title("Docker security options")
                            .description("A comma-separated list of string flags "
                                    + "to pass directly to --security-opt.")
                            .required(false)
                            .defaultValue("")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .freeSelect(DOCKER_IPC_MODE)
                            .title("IPC mode")
                            .description("The IPC mode to be used for the container.")
                            .required(true)
                            .values("none",
                                    "host",
                                    "container:<container_name>"
                            )
                            .defaultValue("none")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .select(DOCKER_PID_MODE)
                            .title("PID mode")
                            .description("The PID mode to be used for the container.")
                            .required(false)
                            .values("",
                                    "host"
                            )
                            .defaultValue("")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .select(DOCKER_UTS_MODE)
                            .title("UTS mode")
                            .description("Set to host to share the UTS namespace with the host. "
                                    + "Note that this also requires the Nomad agent "
                                    + "to be configured to allow privileged containers.")
                            .required(false)
                            .values("",
                                    "host"
                            )
                            .defaultValue("")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    )
                    .property(PropertyBuilder.builder()
                            .select(DOCKER_USERNS_MODE)
                            .title("User Namespace mode")
                            .description("Set to host to use the host's user namespace "
                                    + "when user namespace remapping is enabled "
                                    + "on the docker daemon.")
                            .required(false)
                            .values("",
                                    "host"
                            )
                            .defaultValue("")
                            .renderingOption("groupName", "Privileges")
                            .renderingOption("grouping", "secondary")
                            .build()
                    );
        }
    }

